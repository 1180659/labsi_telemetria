
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00001222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001593  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d1  00000000  00000000  000028ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae5  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00003ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000579  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080d  00000000  00000000  000043d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      14:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      18:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      20:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      24:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      30:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      3c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      44:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      4c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      50:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      54:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      58:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      5c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      60:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      64:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__divsf3+0x4>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <main+0x6e>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <configuracao_do_nrf24L01_TX+0xce>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <I2C_Init+0x2>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <I2C_Repeated_Start+0x38>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	ac 31       	cpi	r26, 0x1C	; 28
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 20 03 	call	0x640	; 0x640 <main>
     182:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_exit>

00000186 <__bad_interrupt>:
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018a <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     18a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     18e:	80 e2       	ldi	r24, 0x20	; 32
     190:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     194:	08 95       	ret

00000196 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     196:	94 ea       	ldi	r25, 0xA4	; 164
     198:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     19c:	ec eb       	ldi	r30, 0xBC	; 188
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	90 81       	ld	r25, Z
     1a2:	99 23       	and	r25, r25
     1a4:	ec f7       	brge	.-6      	; 0x1a0 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 31       	cpi	r25, 0x10	; 16
     1ae:	99 f4       	brne	.+38     	; 0x1d6 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     1b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1ba:	ec eb       	ldi	r30, 0xBC	; 188
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	88 23       	and	r24, r24
     1c2:	ec f7       	brge	.-6      	; 0x1be <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     1c8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     1ca:	80 34       	cpi	r24, 0x40	; 64
     1cc:	31 f0       	breq	.+12     	; 0x1da <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     1ce:	80 32       	cpi	r24, 0x20	; 32
     1d0:	31 f0       	breq	.+12     	; 0x1de <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     1de:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1e0:	08 95       	ret

000001e2 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     1e2:	84 e9       	ldi	r24, 0x94	; 148
     1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	84 fd       	sbrc	r24, 4
     1f0:	fd cf       	rjmp	.-6      	; 0x1ec <I2C_Stop+0xa>
}
     1f2:	08 95       	ret

000001f4 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     208:	cc eb       	ldi	r28, 0xBC	; 188
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	0f 2e       	mov	r0, r31
     20e:	f4 ea       	ldi	r31, 0xA4	; 164
     210:	df 2e       	mov	r13, r31
     212:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     214:	09 eb       	ldi	r16, 0xB9	; 185
     216:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     218:	0f 2e       	mov	r0, r31
     21a:	fb eb       	ldi	r31, 0xBB	; 187
     21c:	ef 2e       	mov	r14, r31
     21e:	f1 2c       	mov	r15, r1
     220:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     222:	0f 2e       	mov	r0, r31
     224:	f4 e8       	ldi	r31, 0x84	; 132
     226:	cf 2e       	mov	r12, r31
     228:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     22a:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     22c:	88 81       	ld	r24, Y
     22e:	88 23       	and	r24, r24
     230:	ec f7       	brge	.-6      	; 0x22c <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     232:	f8 01       	movw	r30, r16
     234:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     236:	88 7f       	andi	r24, 0xF8	; 248
     238:	88 30       	cpi	r24, 0x08	; 8
     23a:	b9 f7       	brne	.-18     	; 0x22a <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     23c:	f7 01       	movw	r30, r14
     23e:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     240:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     242:	88 81       	ld	r24, Y
     244:	88 23       	and	r24, r24
     246:	ec f7       	brge	.-6      	; 0x242 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     248:	f8 01       	movw	r30, r16
     24a:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     24c:	88 7f       	andi	r24, 0xF8	; 248
     24e:	88 31       	cpi	r24, 0x18	; 24
     250:	19 f0       	breq	.+6      	; 0x258 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
     252:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
			continue;										/* continue with start loop again */
     256:	e9 cf       	rjmp	.-46     	; 0x22a <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	df 90       	pop	r13
     266:	cf 90       	pop	r12
     268:	bf 90       	pop	r11
     26a:	08 95       	ret

0000026c <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     26c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     270:	84 e8       	ldi	r24, 0x84	; 132
     272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     276:	ec eb       	ldi	r30, 0xBC	; 188
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	88 23       	and	r24, r24
     27e:	ec f7       	brge	.-6      	; 0x27a <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     280:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     284:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     286:	88 32       	cpi	r24, 0x28	; 40
     288:	21 f0       	breq	.+8      	; 0x292 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     28a:	80 33       	cpi	r24, 0x30	; 48
     28c:	21 f0       	breq	.+8      	; 0x296 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     296:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     298:	08 95       	ret

0000029a <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     29a:	84 ec       	ldi	r24, 0xC4	; 196
     29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2a0:	ec eb       	ldi	r30, 0xBC	; 188
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	88 23       	and	r24, r24
     2a8:	ec f7       	brge	.-6      	; 0x2a4 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
     2aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
     2ae:	08 95       	ret

000002b0 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2b6:	ec eb       	ldi	r30, 0xBC	; 188
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	ec f7       	brge	.-6      	; 0x2ba <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
     2c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
     2c4:	08 95       	ret

000002c6 <config_portas_atmega>:
uint8_t spi_read(uint8_t junkdata)
{
	SPDR = junkdata; // Write data to SPI data register 
	while(!(SPSR & (1<<SPIF)));		// Wait till transmission complete 
	return(SPDR);
}
     2c6:	14 b8       	out	0x04, r1	; 4
     2c8:	84 b1       	in	r24, 0x04	; 4
     2ca:	8e 62       	ori	r24, 0x2E	; 46
     2cc:	84 b9       	out	0x04, r24	; 4
     2ce:	24 98       	cbi	0x04, 4	; 4
     2d0:	15 b8       	out	0x05, r1	; 5
     2d2:	2a 9a       	sbi	0x05, 2	; 5
     2d4:	29 98       	cbi	0x05, 1	; 5
     2d6:	1a b8       	out	0x0a, r1	; 10
     2d8:	87 b1       	in	r24, 0x07	; 7
     2da:	8c 60       	ori	r24, 0x0C	; 12
     2dc:	87 b9       	out	0x07, r24	; 7
     2de:	53 98       	cbi	0x0a, 3	; 10
     2e0:	43 98       	cbi	0x08, 3	; 8
     2e2:	08 95       	ret

000002e4 <config_spi_atmega>:
     2e4:	80 ed       	ldi	r24, 0xD0	; 208
     2e6:	8c bd       	out	0x2c, r24	; 44
     2e8:	81 e8       	ldi	r24, 0x81	; 129
     2ea:	8d bd       	out	0x2d, r24	; 45
     2ec:	08 95       	ret

000002ee <spi_write>:


void spi_write(uint8_t data)
{
	SPDR = data;					/* Write data to SPI data register */ 
     2ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));		/* Wait till transmission complete */
     2f0:	0d b4       	in	r0, 0x2d	; 45
     2f2:	07 fe       	sbrs	r0, 7
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <spi_write+0x2>
}
     2f6:	08 95       	ret

000002f8 <spi_write_x_bytes>:


void spi_write_x_bytes(char data[])
{
     2f8:	fc 01       	movw	r30, r24
     2fa:	9c 01       	movw	r18, r24
     2fc:	21 5e       	subi	r18, 0xE1	; 225
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
	
	int i;
	
	for(i=0;i<31;i++) //envia os 31 bytes
	{
		SPDR = data[i];
     300:	81 91       	ld	r24, Z+
     302:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));		
     304:	0d b4       	in	r0, 0x2d	; 45
     306:	07 fe       	sbrs	r0, 7
     308:	fd cf       	rjmp	.-6      	; 0x304 <spi_write_x_bytes+0xc>
void spi_write_x_bytes(char data[])
{
	
	int i;
	
	for(i=0;i<31;i++) //envia os 31 bytes
     30a:	e2 17       	cp	r30, r18
     30c:	f3 07       	cpc	r31, r19
     30e:	c1 f7       	brne	.-16     	; 0x300 <spi_write_x_bytes+0x8>
	{
		SPDR = data[i];
		while(!(SPSR & (1<<SPIF)));		
	}
	
}
     310:	08 95       	ret

00000312 <configuracao_do_nrf24L01_TX>:

void configuracao_do_nrf24L01_TX()
{
	
	PORTB &= ~(1<<CE);
     312:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     314:	8f e2       	ldi	r24, 0x2F	; 47
     316:	95 e7       	ldi	r25, 0x75	; 117
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <configuracao_do_nrf24L01_TX+0x6>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <configuracao_do_nrf24L01_TX+0xc>
     31e:	00 00       	nop
	
	_delay_ms(12); // tempo de espera após alimentação do modulo
	
	PORTB &= ~(1<<SS_NRF); //SETUP_AW
     320:	2a 98       	cbi	0x05, 2	; 5
	spi_write(SETUP_AW);
     322:	83 e2       	ldi	r24, 0x23	; 35
     324:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00000001); //3 bytes para RX e TX address
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     32e:	2a 9a       	sbi	0x05, 2	; 5
		
	PORTB &= ~(1<<SS_NRF); //RX_ADDR_P0 address de 3 bytes
     330:	2a 98       	cbi	0x05, 2	; 5
	spi_write(RX_ADDR_P0);
     332:	8a e2       	ldi	r24, 0x2A	; 42
     334:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte2);
     338:	89 e6       	ldi	r24, 0x69	; 105
     33a:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte1);
     33e:	8d ee       	ldi	r24, 0xED	; 237
     340:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte0);
     344:	85 e7       	ldi	r24, 0x75	; 117
     346:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     34a:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB &= ~(1<<SS_NRF); //TX_ADDR address de 3 bytes
     34c:	2a 98       	cbi	0x05, 2	; 5
	spi_write(TX_ADDR);
     34e:	80 e3       	ldi	r24, 0x30	; 48
     350:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte2);
     354:	89 e6       	ldi	r24, 0x69	; 105
     356:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte1);
     35a:	8d ee       	ldi	r24, 0xED	; 237
     35c:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(END_TX_Byte0);
     360:	85 e7       	ldi	r24, 0x75	; 117
     362:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     366:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB &= ~(1<<SS_NRF); //EN_AA
     368:	2a 98       	cbi	0x05, 2	; 5
	spi_write(EN_AA);
     36a:	81 e2       	ldi	r24, 0x21	; 33
     36c:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0); //NO EN_AA
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     376:	2a 9a       	sbi	0x05, 2	; 5
	

	PORTB &= ~(1<<SS_NRF); //EN_RXADDR
     378:	2a 98       	cbi	0x05, 2	; 5
	spi_write(EN_RXADDR);
     37a:	82 e2       	ldi	r24, 0x22	; 34
     37c:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00000001); //enable of data pipe 0
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     386:	2a 9a       	sbi	0x05, 2	; 5


	PORTB &= ~(1<<SS_NRF); //SETUP_RETR 
     388:	2a 98       	cbi	0x05, 2	; 5
	spi_write(SETUP_RETR);
     38a:	84 e2       	ldi	r24, 0x24	; 36
     38c:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00000000); //Re-Transmit disabled
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     396:	2a 9a       	sbi	0x05, 2	; 5
	

	PORTB &= ~(1<<SS_NRF); //RF_CH
     398:	2a 98       	cbi	0x05, 2	; 5
	spi_write(RF_CH);
     39a:	85 e2       	ldi	r24, 0x25	; 37
     39c:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0); //Channel frequency at 2.4GHZ + 0MHZ = 2.40GHz
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     3a6:	2a 9a       	sbi	0x05, 2	; 5
	

	PORTB &= ~(1<<SS_NRF); //RF_SETUP
     3a8:	2a 98       	cbi	0x05, 2	; 5
	spi_write(RF_SETUP);
     3aa:	86 e2       	ldi	r24, 0x26	; 38
     3ac:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00000110); //air data rate = 1Mbps, output power in TX mode = 0dBm, "setup LNA gain disabled"
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     3b6:	2a 9a       	sbi	0x05, 2	; 5
	

	PORTB &= ~(1<<SS_NRF); //RX_PW_P0
     3b8:	2a 98       	cbi	0x05, 2	; 5
	spi_write(RX_PW_P0);
     3ba:	81 e3       	ldi	r24, 0x31	; 49
     3bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00011111);  //31 bytes
     3c0:	8f e1       	ldi	r24, 0x1F	; 31
     3c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     3c6:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB &= ~(1<<SS_NRF); //CONFIG
     3c8:	2a 98       	cbi	0x05, 2	; 5
	spi_write(CONFIGnrf);
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b01011010); //CRC (des)ligado, Power UP, modo PTX, IRQ -> MASK_TX_DS  PTX
     3d0:	8a e5       	ldi	r24, 0x5A	; 90
     3d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     3d6:	2a 9a       	sbi	0x05, 2	; 5
     3d8:	87 e8       	ldi	r24, 0x87	; 135
     3da:	93 e1       	ldi	r25, 0x13	; 19
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <configuracao_do_nrf24L01_TX+0xca>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <configuracao_do_nrf24L01_TX+0xd0>
     3e2:	00 00       	nop
     3e4:	08 95       	ret

000003e6 <MPU6050_Init>:
     3e6:	2f ed       	ldi	r18, 0xDF	; 223
     3e8:	83 e9       	ldi	r24, 0x93	; 147
     3ea:	94 e0       	ldi	r25, 0x04	; 4
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <MPU6050_Init+0x6>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <MPU6050_Init+0x10>
     3f6:	00 00       	nop
}

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     3f8:	80 ed       	ldi	r24, 0xD0	; 208
     3fa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     3fe:	89 e1       	ldi	r24, 0x19	; 25
     400:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     404:	87 e0       	ldi	r24, 0x07	; 7
     406:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Stop();
     40a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     40e:	80 ed       	ldi	r24, 0xD0	; 208
     410:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     414:	8b e6       	ldi	r24, 0x6B	; 107
     416:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Stop();
     420:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     424:	80 ed       	ldi	r24, 0xD0	; 208
     426:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     42a:	8a e1       	ldi	r24, 0x1A	; 26
     42c:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Stop();
     436:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     43a:	80 ed       	ldi	r24, 0xD0	; 208
     43c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     440:	8b e1       	ldi	r24, 0x1B	; 27
     442:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     446:	88 e1       	ldi	r24, 0x18	; 24
     448:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Stop();
     44c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     450:	80 ed       	ldi	r24, 0xD0	; 208
     452:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     456:	88 e3       	ldi	r24, 0x38	; 56
     458:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Write(0x01);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Stop();
     462:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
     466:	08 95       	ret

00000468 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     468:	80 ed       	ldi	r24, 0xD0	; 208
     46a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     46e:	8b e3       	ldi	r24, 0x3B	; 59
     470:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     474:	81 ed       	ldi	r24, 0xD1	; 209
     476:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Repeated_Start>
     47a:	08 95       	ret

0000047c <Read_RawValue>:
}

void Read_RawValue()
{
     47c:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     47e:	0e 94 34 02 	call	0x468	; 0x468 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     482:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     486:	c8 2f       	mov	r28, r24
     488:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     48c:	6c 2f       	mov	r22, r28
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	76 2f       	mov	r23, r22
     492:	66 27       	eor	r22, r22
     494:	68 2b       	or	r22, r24
     496:	07 2e       	mov	r0, r23
     498:	00 0c       	add	r0, r0
     49a:	88 0b       	sbc	r24, r24
     49c:	99 0b       	sbc	r25, r25
     49e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     4a2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <Acc_x>
     4a6:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <Acc_x+0x1>
     4aa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Acc_x+0x2>
     4ae:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4b2:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     4b6:	c8 2f       	mov	r28, r24
     4b8:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     4bc:	6c 2f       	mov	r22, r28
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	76 2f       	mov	r23, r22
     4c2:	66 27       	eor	r22, r22
     4c4:	68 2b       	or	r22, r24
     4c6:	07 2e       	mov	r0, r23
     4c8:	00 0c       	add	r0, r0
     4ca:	88 0b       	sbc	r24, r24
     4cc:	99 0b       	sbc	r25, r25
     4ce:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     4d2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Acc_y>
     4d6:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Acc_y+0x1>
     4da:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Acc_y+0x2>
     4de:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4e2:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     4e6:	c8 2f       	mov	r28, r24
     4e8:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     4ec:	6c 2f       	mov	r22, r28
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	76 2f       	mov	r23, r22
     4f2:	66 27       	eor	r22, r22
     4f4:	68 2b       	or	r22, r24
     4f6:	07 2e       	mov	r0, r23
     4f8:	00 0c       	add	r0, r0
     4fa:	88 0b       	sbc	r24, r24
     4fc:	99 0b       	sbc	r25, r25
     4fe:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     502:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
     506:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
     50a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
     50e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     512:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     516:	c8 2f       	mov	r28, r24
     518:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     51c:	6c 2f       	mov	r22, r28
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	76 2f       	mov	r23, r22
     522:	66 27       	eor	r22, r22
     524:	68 2b       	or	r22, r24
     526:	07 2e       	mov	r0, r23
     528:	00 0c       	add	r0, r0
     52a:	88 0b       	sbc	r24, r24
     52c:	99 0b       	sbc	r25, r25
     52e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     532:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Temperature>
     536:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Temperature+0x1>
     53a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Temperature+0x2>
     53e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     542:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     546:	c8 2f       	mov	r28, r24
     548:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     54c:	6c 2f       	mov	r22, r28
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	76 2f       	mov	r23, r22
     552:	66 27       	eor	r22, r22
     554:	68 2b       	or	r22, r24
     556:	07 2e       	mov	r0, r23
     558:	00 0c       	add	r0, r0
     55a:	88 0b       	sbc	r24, r24
     55c:	99 0b       	sbc	r25, r25
     55e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     562:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Gyro_x>
     566:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Gyro_x+0x1>
     56a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Gyro_x+0x2>
     56e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     572:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     576:	c8 2f       	mov	r28, r24
     578:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     57c:	6c 2f       	mov	r22, r28
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	76 2f       	mov	r23, r22
     582:	66 27       	eor	r22, r22
     584:	68 2b       	or	r22, r24
     586:	07 2e       	mov	r0, r23
     588:	00 0c       	add	r0, r0
     58a:	88 0b       	sbc	r24, r24
     58c:	99 0b       	sbc	r25, r25
     58e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     592:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Gyro_y>
     596:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Gyro_y+0x1>
     59a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Gyro_y+0x2>
     59e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     5a2:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Read_Ack>
     5a6:	c8 2f       	mov	r28, r24
     5a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Nack>
     5ac:	6c 2f       	mov	r22, r28
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	76 2f       	mov	r23, r22
     5b2:	66 27       	eor	r22, r22
     5b4:	68 2b       	or	r22, r24
     5b6:	07 2e       	mov	r0, r23
     5b8:	00 0c       	add	r0, r0
     5ba:	88 0b       	sbc	r24, r24
     5bc:	99 0b       	sbc	r25, r25
     5be:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
     5c2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <Gyro_z>
     5c6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <Gyro_z+0x1>
     5ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Gyro_z+0x2>
     5ce:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Gyro_z+0x3>
	I2C_Stop();
     5d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
}
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <enviar_sample>:

void enviar_sample(char data[]) 
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
	
	
	
	PORTB &= ~(1<<CE);
     5e0:	29 98       	cbi	0x05, 1	; 5
	
	
	PORTB &= ~(1<<SS_NRF);
     5e2:	2a 98       	cbi	0x05, 2	; 5
	spi_write(FLUSH_TX); //FLUSH_TX
     5e4:	81 ee       	ldi	r24, 0xE1	; 225
     5e6:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     5ea:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB &= ~(1<<SS_NRF); //ENVIAR SAMPLE
     5ec:	2a 98       	cbi	0x05, 2	; 5
	spi_write(W_TX_PAYLOAD); //W_TX_PAYLOAD
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write_x_bytes(data);
     5f4:	ce 01       	movw	r24, r28
     5f6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <spi_write_x_bytes>
	PORTB |= (1<<SS_NRF);
     5fa:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB |= (1<<CE);
     5fc:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fe:	81 e2       	ldi	r24, 0x21	; 33
     600:	8a 95       	dec	r24
     602:	f1 f7       	brne	.-4      	; 0x600 <enviar_sample+0x26>
     604:	00 00       	nop
	_delay_us(10); 
	PORTB &= ~(1<<CE);
     606:	29 98       	cbi	0x05, 1	; 5
								
								
								while ( (PIND & (1<<IRQ)) ) //enquanto fifo nao for limpo (enviado)
     608:	4b 9b       	sbis	0x09, 3	; 9
     60a:	08 c0       	rjmp	.+16     	; 0x61c <enviar_sample+0x42>
								{
									PORTC &= ~(1<<LEDstatus);
     60c:	43 98       	cbi	0x08, 3	; 8
									PORTC |= (1<<LEDerror);
     60e:	42 9a       	sbi	0x08, 2	; 8
     610:	80 e1       	ldi	r24, 0x10	; 16
     612:	8a 95       	dec	r24
     614:	f1 f7       	brne	.-4      	; 0x612 <enviar_sample+0x38>
     616:	00 c0       	rjmp	.+0      	; 0x618 <enviar_sample+0x3e>
	PORTB |= (1<<CE);
	_delay_us(10); 
	PORTB &= ~(1<<CE);
								
								
								while ( (PIND & (1<<IRQ)) ) //enquanto fifo nao for limpo (enviado)
     618:	4b 99       	sbic	0x09, 3	; 9
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <enviar_sample+0x32>
									PORTC |= (1<<LEDerror);
									_delay_us(5);
									
								}
									
								PORTC &= ~(1<<LEDerror);	
     61c:	42 98       	cbi	0x08, 2	; 8
								PORTC |= (1<<LEDstatus); 
     61e:	43 9a       	sbi	0x08, 3	; 8
									
								
									
								
								
	PORTB &= ~(1<<SS_NRF); //STATUS dar reset/limpar
     620:	2a 98       	cbi	0x05, 2	; 5
	spi_write(STATUS);
     622:	87 e2       	ldi	r24, 0x27	; 39
     624:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	spi_write(0b00100000); //clear bit do TX FIFO
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);	
     62e:	2a 9a       	sbi	0x05, 2	; 5
	
	
	PORTB &= ~(1<<SS_NRF);
     630:	2a 98       	cbi	0x05, 2	; 5
	spi_write(FLUSH_TX); //FLUSH_TX
     632:	81 ee       	ldi	r24, 0xE1	; 225
     634:	0e 94 77 01 	call	0x2ee	; 0x2ee <spi_write>
	PORTB |= (1<<SS_NRF);
     638:	2a 9a       	sbi	0x05, 2	; 5

}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <main>:



int main(void)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	c5 5e       	subi	r28, 0xE5	; 229
     64a:	d1 09       	sbc	r29, r1
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61

	
	PORTB &= ~(1<<CE);
     656:	29 98       	cbi	0x05, 1	; 5
	
	
	float Xa,Ya,Za,t;
	float Xg=0,Yg=0,Zg=0;
	
	config_portas_atmega();
     658:	0e 94 63 01 	call	0x2c6	; 0x2c6 <config_portas_atmega>
	config_spi_atmega();
     65c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <config_spi_atmega>
	configuracao_do_nrf24L01_TX();
     660:	0e 94 89 01 	call	0x312	; 0x312 <configuracao_do_nrf24L01_TX>
	I2C_Init();											/* Initialize I2C */
     664:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Init>
	MPU6050_Init();
     668:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <MPU6050_Init>
		dtostrf(t, 10, 10, t_text);
		dtostrf(Xg, 10, 10, gx_text);
		dtostrf(Yg, 10, 10, gy_text);
		dtostrf(Zg, 10, 10, gz_text);
		
		ax_text[30]=1;
     66c:	33 24       	eor	r3, r3
     66e:	33 94       	inc	r3
		ay_text[30]=2;
     670:	68 94       	set
     672:	22 24       	eor	r2, r2
     674:	21 f8       	bld	r2, 1
	
	
	
	while (1)
	{	
		Read_RawValue();
     676:	0e 94 3e 02 	call	0x47c	; 0x47c <Read_RawValue>

		Xa = Acc_x/16384.0;								/* Divide raw value by sensitivity scale factor to get real values */
		Ya = Acc_y/16384.0;
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e8       	ldi	r20, 0x80	; 128
     680:	58 e3       	ldi	r21, 0x38	; 56
     682:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Acc_y>
     686:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Acc_y+0x1>
     68a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Acc_y+0x2>
     68e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Acc_y+0x3>
     692:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
		Za = Acc_z/16384.0;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e8       	ldi	r20, 0x80	; 128
     6a0:	58 e3       	ldi	r21, 0x38	; 56
     6a2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
     6a6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
     6aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
     6ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
     6b2:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3>
     6b6:	4b 01       	movw	r8, r22
     6b8:	5c 01       	movw	r10, r24
		
		Xg = Gyro_x/16.4;
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	43 e8       	ldi	r20, 0x83	; 131
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Gyro_x>
     6c6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Gyro_x+0x1>
     6ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Gyro_x+0x2>
     6ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Gyro_x+0x3>
     6d2:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
     6d6:	c6 52       	subi	r28, 0x26	; 38
     6d8:	df 4f       	sbci	r29, 0xFF	; 255
     6da:	68 83       	st	Y, r22
     6dc:	79 83       	std	Y+1, r23	; 0x01
     6de:	8a 83       	std	Y+2, r24	; 0x02
     6e0:	9b 83       	std	Y+3, r25	; 0x03
     6e2:	ca 5d       	subi	r28, 0xDA	; 218
     6e4:	d0 40       	sbci	r29, 0x00	; 0
		Yg = Gyro_y/16.4;
     6e6:	23 e3       	ldi	r18, 0x33	; 51
     6e8:	33 e3       	ldi	r19, 0x33	; 51
     6ea:	43 e8       	ldi	r20, 0x83	; 131
     6ec:	51 e4       	ldi	r21, 0x41	; 65
     6ee:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Gyro_y>
     6f2:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <Gyro_y+0x1>
     6f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Gyro_y+0x2>
     6fa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Gyro_y+0x3>
     6fe:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
     702:	c2 52       	subi	r28, 0x22	; 34
     704:	df 4f       	sbci	r29, 0xFF	; 255
     706:	68 83       	st	Y, r22
     708:	79 83       	std	Y+1, r23	; 0x01
     70a:	8a 83       	std	Y+2, r24	; 0x02
     70c:	9b 83       	std	Y+3, r25	; 0x03
     70e:	ce 5d       	subi	r28, 0xDE	; 222
     710:	d0 40       	sbci	r29, 0x00	; 0
		Zg = Gyro_z/16.4;
     712:	23 e3       	ldi	r18, 0x33	; 51
     714:	33 e3       	ldi	r19, 0x33	; 51
     716:	43 e8       	ldi	r20, 0x83	; 131
     718:	51 e4       	ldi	r21, 0x41	; 65
     71a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Gyro_z>
     71e:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <Gyro_z+0x1>
     722:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Gyro_z+0x2>
     726:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Gyro_z+0x3>
     72a:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
     72e:	ce 51       	subi	r28, 0x1E	; 30
     730:	df 4f       	sbci	r29, 0xFF	; 255
     732:	68 83       	st	Y, r22
     734:	79 83       	std	Y+1, r23	; 0x01
     736:	8a 83       	std	Y+2, r24	; 0x02
     738:	9b 83       	std	Y+3, r25	; 0x03
     73a:	c2 5e       	subi	r28, 0xE2	; 226
     73c:	d0 40       	sbci	r29, 0x00	; 0

		t = (Temperature/340.00)+36.53;					/* Convert temperature in �/c using formula */
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	4a ea       	ldi	r20, 0xAA	; 170
     744:	53 e4       	ldi	r21, 0x43	; 67
     746:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Temperature>
     74a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Temperature+0x1>
     74e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Temperature+0x2>
     752:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Temperature+0x3>
     756:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
     75a:	28 eb       	ldi	r18, 0xB8	; 184
     75c:	3e e1       	ldi	r19, 0x1E	; 30
     75e:	42 e1       	ldi	r20, 0x12	; 18
     760:	52 e4       	ldi	r21, 0x42	; 66
     762:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__addsf3>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
		char t_text[31];
		char gx_text[31];
		char gy_text[31];
		char gz_text[31];

		dtostrf(Xa, 10, 10, ax_text);
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e8       	ldi	r20, 0x80	; 128
     770:	58 e3       	ldi	r21, 0x38	; 56
     772:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Acc_x>
     776:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Acc_x+0x1>
     77a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Acc_x+0x2>
     77e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Acc_x+0x3>
     782:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3>
     786:	8e 01       	movw	r16, r28
     788:	05 54       	subi	r16, 0x45	; 69
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	2a e0       	ldi	r18, 0x0A	; 10
     78e:	4a e0       	ldi	r20, 0x0A	; 10
     790:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(Ya, 10, 10, ay_text);
     794:	0f 51       	subi	r16, 0x1F	; 31
     796:	11 09       	sbc	r17, r1
     798:	2a e0       	ldi	r18, 0x0A	; 10
     79a:	4a e0       	ldi	r20, 0x0A	; 10
     79c:	c3 01       	movw	r24, r6
     79e:	b2 01       	movw	r22, r4
     7a0:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(Za, 10, 10, az_text);
     7a4:	0f 51       	subi	r16, 0x1F	; 31
     7a6:	11 09       	sbc	r17, r1
     7a8:	2a e0       	ldi	r18, 0x0A	; 10
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(t, 10, 10, t_text);
     7b4:	0f 51       	subi	r16, 0x1F	; 31
     7b6:	11 09       	sbc	r17, r1
     7b8:	2a e0       	ldi	r18, 0x0A	; 10
     7ba:	4a e0       	ldi	r20, 0x0A	; 10
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(Xg, 10, 10, gx_text);
     7c4:	0f 51       	subi	r16, 0x1F	; 31
     7c6:	11 09       	sbc	r17, r1
     7c8:	2a e0       	ldi	r18, 0x0A	; 10
     7ca:	4a e0       	ldi	r20, 0x0A	; 10
     7cc:	c6 52       	subi	r28, 0x26	; 38
     7ce:	df 4f       	sbci	r29, 0xFF	; 255
     7d0:	68 81       	ld	r22, Y
     7d2:	79 81       	ldd	r23, Y+1	; 0x01
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	9b 81       	ldd	r25, Y+3	; 0x03
     7d8:	ca 5d       	subi	r28, 0xDA	; 218
     7da:	d0 40       	sbci	r29, 0x00	; 0
     7dc:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(Yg, 10, 10, gy_text);
     7e0:	0f 51       	subi	r16, 0x1F	; 31
     7e2:	11 09       	sbc	r17, r1
     7e4:	2a e0       	ldi	r18, 0x0A	; 10
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	c2 52       	subi	r28, 0x22	; 34
     7ea:	df 4f       	sbci	r29, 0xFF	; 255
     7ec:	68 81       	ld	r22, Y
     7ee:	79 81       	ldd	r23, Y+1	; 0x01
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	9b 81       	ldd	r25, Y+3	; 0x03
     7f4:	ce 5d       	subi	r28, 0xDE	; 222
     7f6:	d0 40       	sbci	r29, 0x00	; 0
     7f8:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		dtostrf(Zg, 10, 10, gz_text);
     7fc:	0f 51       	subi	r16, 0x1F	; 31
     7fe:	11 09       	sbc	r17, r1
     800:	2a e0       	ldi	r18, 0x0A	; 10
     802:	4a e0       	ldi	r20, 0x0A	; 10
     804:	ce 51       	subi	r28, 0x1E	; 30
     806:	df 4f       	sbci	r29, 0xFF	; 255
     808:	68 81       	ld	r22, Y
     80a:	79 81       	ldd	r23, Y+1	; 0x01
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	c2 5e       	subi	r28, 0xE2	; 226
     812:	d0 40       	sbci	r29, 0x00	; 0
     814:	0e 94 4c 06 	call	0xc98	; 0xc98 <dtostrf>
		
		ax_text[30]=1;
     818:	c7 52       	subi	r28, 0x27	; 39
     81a:	df 4f       	sbci	r29, 0xFF	; 255
     81c:	38 82       	st	Y, r3
     81e:	c9 5d       	subi	r28, 0xD9	; 217
     820:	d0 40       	sbci	r29, 0x00	; 0
		ay_text[30]=2;
     822:	c6 54       	subi	r28, 0x46	; 70
     824:	df 4f       	sbci	r29, 0xFF	; 255
     826:	28 82       	st	Y, r2
     828:	ca 5b       	subi	r28, 0xBA	; 186
     82a:	d0 40       	sbci	r29, 0x00	; 0
		az_text[30]=3;
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	c5 56       	subi	r28, 0x65	; 101
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	88 83       	st	Y, r24
     834:	cb 59       	subi	r28, 0x9B	; 155
     836:	d0 40       	sbci	r29, 0x00	; 0
		t_text[30]=4;
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	ed 96       	adiw	r28, 0x3d	; 61
     83c:	9f af       	std	Y+63, r25	; 0x3f
     83e:	ed 97       	sbiw	r28, 0x3d	; 61
		gx_text[30]=5;
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	6e 96       	adiw	r28, 0x1e	; 30
     844:	8f af       	std	Y+63, r24	; 0x3f
     846:	6e 97       	sbiw	r28, 0x1e	; 30
		gy_text[30]=6;
     848:	86 e0       	ldi	r24, 0x06	; 6
     84a:	8e af       	std	Y+62, r24	; 0x3e
		gz_text[30]=7;
     84c:	87 e0       	ldi	r24, 0x07	; 7
     84e:	8f 8f       	std	Y+31, r24	; 0x1f
     850:	89 ef       	ldi	r24, 0xF9	; 249
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <main+0x214>
     858:	00 c0       	rjmp	.+0      	; 0x85a <main+0x21a>
     85a:	00 00       	nop
		
		_delay_us(100); 
		enviar_sample(ax_text);
     85c:	ce 01       	movw	r24, r28
     85e:	85 54       	subi	r24, 0x45	; 69
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     866:	89 ef       	ldi	r24, 0xF9	; 249
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <main+0x22a>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <main+0x230>
     870:	00 00       	nop
		_delay_us(100);
		enviar_sample(ay_text);
     872:	ce 01       	movw	r24, r28
     874:	84 56       	subi	r24, 0x64	; 100
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     87c:	89 ef       	ldi	r24, 0xF9	; 249
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <main+0x240>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x246>
     886:	00 00       	nop
		_delay_us(100);
		enviar_sample(az_text);
     888:	ce 01       	movw	r24, r28
     88a:	83 58       	subi	r24, 0x83	; 131
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     892:	89 ef       	ldi	r24, 0xF9	; 249
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <main+0x256>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <main+0x25c>
     89c:	00 00       	nop
		_delay_us(100);
		enviar_sample(t_text);
     89e:	ce 01       	movw	r24, r28
     8a0:	82 5a       	subi	r24, 0xA2	; 162
     8a2:	9f 4f       	sbci	r25, 0xFF	; 255
     8a4:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     8a8:	89 ef       	ldi	r24, 0xF9	; 249
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <main+0x26c>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <main+0x272>
     8b2:	00 00       	nop
		_delay_us(100);
		enviar_sample(gx_text);
     8b4:	ce 01       	movw	r24, r28
     8b6:	cf 96       	adiw	r24, 0x3f	; 63
     8b8:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     8bc:	89 ef       	ldi	r24, 0xF9	; 249
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <main+0x280>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <main+0x286>
     8c6:	00 00       	nop
		_delay_us(100);
		enviar_sample(gy_text);
     8c8:	ce 01       	movw	r24, r28
     8ca:	80 96       	adiw	r24, 0x20	; 32
     8cc:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     8d0:	89 ef       	ldi	r24, 0xF9	; 249
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <main+0x294>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <main+0x29a>
     8da:	00 00       	nop
		_delay_us(100);
		enviar_sample(gz_text);
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 ed 02 	call	0x5da	; 0x5da <enviar_sample>
     8e2:	c9 ce       	rjmp	.-622    	; 0x676 <main+0x36>

000008e4 <__subsf3>:
     8e4:	50 58       	subi	r21, 0x80	; 128

000008e6 <__addsf3>:
     8e6:	bb 27       	eor	r27, r27
     8e8:	aa 27       	eor	r26, r26
     8ea:	0e 94 8a 04 	call	0x914	; 0x914 <__addsf3x>
     8ee:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_round>
     8f2:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_pscA>
     8f6:	38 f0       	brcs	.+14     	; 0x906 <__stack+0x7>
     8f8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_pscB>
     8fc:	20 f0       	brcs	.+8      	; 0x906 <__stack+0x7>
     8fe:	39 f4       	brne	.+14     	; 0x90e <__stack+0xf>
     900:	9f 3f       	cpi	r25, 0xFF	; 255
     902:	19 f4       	brne	.+6      	; 0x90a <__stack+0xb>
     904:	26 f4       	brtc	.+8      	; 0x90e <__stack+0xf>
     906:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_nan>
     90a:	0e f4       	brtc	.+2      	; 0x90e <__stack+0xf>
     90c:	e0 95       	com	r30
     90e:	e7 fb       	bst	r30, 7
     910:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_inf>

00000914 <__addsf3x>:
     914:	e9 2f       	mov	r30, r25
     916:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_split3>
     91a:	58 f3       	brcs	.-42     	; 0x8f2 <__addsf3+0xc>
     91c:	ba 17       	cp	r27, r26
     91e:	62 07       	cpc	r22, r18
     920:	73 07       	cpc	r23, r19
     922:	84 07       	cpc	r24, r20
     924:	95 07       	cpc	r25, r21
     926:	20 f0       	brcs	.+8      	; 0x930 <__addsf3x+0x1c>
     928:	79 f4       	brne	.+30     	; 0x948 <__addsf3x+0x34>
     92a:	a6 f5       	brtc	.+104    	; 0x994 <__addsf3x+0x80>
     92c:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__fp_zero>
     930:	0e f4       	brtc	.+2      	; 0x934 <__addsf3x+0x20>
     932:	e0 95       	com	r30
     934:	0b 2e       	mov	r0, r27
     936:	ba 2f       	mov	r27, r26
     938:	a0 2d       	mov	r26, r0
     93a:	0b 01       	movw	r0, r22
     93c:	b9 01       	movw	r22, r18
     93e:	90 01       	movw	r18, r0
     940:	0c 01       	movw	r0, r24
     942:	ca 01       	movw	r24, r20
     944:	a0 01       	movw	r20, r0
     946:	11 24       	eor	r1, r1
     948:	ff 27       	eor	r31, r31
     94a:	59 1b       	sub	r21, r25
     94c:	99 f0       	breq	.+38     	; 0x974 <__addsf3x+0x60>
     94e:	59 3f       	cpi	r21, 0xF9	; 249
     950:	50 f4       	brcc	.+20     	; 0x966 <__addsf3x+0x52>
     952:	50 3e       	cpi	r21, 0xE0	; 224
     954:	68 f1       	brcs	.+90     	; 0x9b0 <__addsf3x+0x9c>
     956:	1a 16       	cp	r1, r26
     958:	f0 40       	sbci	r31, 0x00	; 0
     95a:	a2 2f       	mov	r26, r18
     95c:	23 2f       	mov	r18, r19
     95e:	34 2f       	mov	r19, r20
     960:	44 27       	eor	r20, r20
     962:	58 5f       	subi	r21, 0xF8	; 248
     964:	f3 cf       	rjmp	.-26     	; 0x94c <__addsf3x+0x38>
     966:	46 95       	lsr	r20
     968:	37 95       	ror	r19
     96a:	27 95       	ror	r18
     96c:	a7 95       	ror	r26
     96e:	f0 40       	sbci	r31, 0x00	; 0
     970:	53 95       	inc	r21
     972:	c9 f7       	brne	.-14     	; 0x966 <__addsf3x+0x52>
     974:	7e f4       	brtc	.+30     	; 0x994 <__addsf3x+0x80>
     976:	1f 16       	cp	r1, r31
     978:	ba 0b       	sbc	r27, r26
     97a:	62 0b       	sbc	r22, r18
     97c:	73 0b       	sbc	r23, r19
     97e:	84 0b       	sbc	r24, r20
     980:	ba f0       	brmi	.+46     	; 0x9b0 <__addsf3x+0x9c>
     982:	91 50       	subi	r25, 0x01	; 1
     984:	a1 f0       	breq	.+40     	; 0x9ae <__addsf3x+0x9a>
     986:	ff 0f       	add	r31, r31
     988:	bb 1f       	adc	r27, r27
     98a:	66 1f       	adc	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	88 1f       	adc	r24, r24
     990:	c2 f7       	brpl	.-16     	; 0x982 <__addsf3x+0x6e>
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <__addsf3x+0x9c>
     994:	ba 0f       	add	r27, r26
     996:	62 1f       	adc	r22, r18
     998:	73 1f       	adc	r23, r19
     99a:	84 1f       	adc	r24, r20
     99c:	48 f4       	brcc	.+18     	; 0x9b0 <__addsf3x+0x9c>
     99e:	87 95       	ror	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b7 95       	ror	r27
     9a6:	f7 95       	ror	r31
     9a8:	9e 3f       	cpi	r25, 0xFE	; 254
     9aa:	08 f0       	brcs	.+2      	; 0x9ae <__addsf3x+0x9a>
     9ac:	b0 cf       	rjmp	.-160    	; 0x90e <__stack+0xf>
     9ae:	93 95       	inc	r25
     9b0:	88 0f       	add	r24, r24
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <__addsf3x+0xa2>
     9b4:	99 27       	eor	r25, r25
     9b6:	ee 0f       	add	r30, r30
     9b8:	97 95       	ror	r25
     9ba:	87 95       	ror	r24
     9bc:	08 95       	ret

000009be <__divsf3>:
     9be:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__divsf3x>
     9c2:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_round>
     9c6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_pscB>
     9ca:	58 f0       	brcs	.+22     	; 0x9e2 <__divsf3+0x24>
     9cc:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_pscA>
     9d0:	40 f0       	brcs	.+16     	; 0x9e2 <__divsf3+0x24>
     9d2:	29 f4       	brne	.+10     	; 0x9de <__divsf3+0x20>
     9d4:	5f 3f       	cpi	r21, 0xFF	; 255
     9d6:	29 f0       	breq	.+10     	; 0x9e2 <__divsf3+0x24>
     9d8:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_inf>
     9dc:	51 11       	cpse	r21, r1
     9de:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
     9e2:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_nan>

000009e6 <__divsf3x>:
     9e6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_split3>
     9ea:	68 f3       	brcs	.-38     	; 0x9c6 <__divsf3+0x8>

000009ec <__divsf3_pse>:
     9ec:	99 23       	and	r25, r25
     9ee:	b1 f3       	breq	.-20     	; 0x9dc <__divsf3+0x1e>
     9f0:	55 23       	and	r21, r21
     9f2:	91 f3       	breq	.-28     	; 0x9d8 <__divsf3+0x1a>
     9f4:	95 1b       	sub	r25, r21
     9f6:	55 0b       	sbc	r21, r21
     9f8:	bb 27       	eor	r27, r27
     9fa:	aa 27       	eor	r26, r26
     9fc:	62 17       	cp	r22, r18
     9fe:	73 07       	cpc	r23, r19
     a00:	84 07       	cpc	r24, r20
     a02:	38 f0       	brcs	.+14     	; 0xa12 <__divsf3_pse+0x26>
     a04:	9f 5f       	subi	r25, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	44 1f       	adc	r20, r20
     a0e:	aa 1f       	adc	r26, r26
     a10:	a9 f3       	breq	.-22     	; 0x9fc <__divsf3_pse+0x10>
     a12:	35 d0       	rcall	.+106    	; 0xa7e <__divsf3_pse+0x92>
     a14:	0e 2e       	mov	r0, r30
     a16:	3a f0       	brmi	.+14     	; 0xa26 <__divsf3_pse+0x3a>
     a18:	e0 e8       	ldi	r30, 0x80	; 128
     a1a:	32 d0       	rcall	.+100    	; 0xa80 <__divsf3_pse+0x94>
     a1c:	91 50       	subi	r25, 0x01	; 1
     a1e:	50 40       	sbci	r21, 0x00	; 0
     a20:	e6 95       	lsr	r30
     a22:	00 1c       	adc	r0, r0
     a24:	ca f7       	brpl	.-14     	; 0xa18 <__divsf3_pse+0x2c>
     a26:	2b d0       	rcall	.+86     	; 0xa7e <__divsf3_pse+0x92>
     a28:	fe 2f       	mov	r31, r30
     a2a:	29 d0       	rcall	.+82     	; 0xa7e <__divsf3_pse+0x92>
     a2c:	66 0f       	add	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	88 1f       	adc	r24, r24
     a32:	bb 1f       	adc	r27, r27
     a34:	26 17       	cp	r18, r22
     a36:	37 07       	cpc	r19, r23
     a38:	48 07       	cpc	r20, r24
     a3a:	ab 07       	cpc	r26, r27
     a3c:	b0 e8       	ldi	r27, 0x80	; 128
     a3e:	09 f0       	breq	.+2      	; 0xa42 <__divsf3_pse+0x56>
     a40:	bb 0b       	sbc	r27, r27
     a42:	80 2d       	mov	r24, r0
     a44:	bf 01       	movw	r22, r30
     a46:	ff 27       	eor	r31, r31
     a48:	93 58       	subi	r25, 0x83	; 131
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	3a f0       	brmi	.+14     	; 0xa5c <__divsf3_pse+0x70>
     a4e:	9e 3f       	cpi	r25, 0xFE	; 254
     a50:	51 05       	cpc	r21, r1
     a52:	78 f0       	brcs	.+30     	; 0xa72 <__divsf3_pse+0x86>
     a54:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_inf>
     a58:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
     a5c:	5f 3f       	cpi	r21, 0xFF	; 255
     a5e:	e4 f3       	brlt	.-8      	; 0xa58 <__divsf3_pse+0x6c>
     a60:	98 3e       	cpi	r25, 0xE8	; 232
     a62:	d4 f3       	brlt	.-12     	; 0xa58 <__divsf3_pse+0x6c>
     a64:	86 95       	lsr	r24
     a66:	77 95       	ror	r23
     a68:	67 95       	ror	r22
     a6a:	b7 95       	ror	r27
     a6c:	f7 95       	ror	r31
     a6e:	9f 5f       	subi	r25, 0xFF	; 255
     a70:	c9 f7       	brne	.-14     	; 0xa64 <__divsf3_pse+0x78>
     a72:	88 0f       	add	r24, r24
     a74:	91 1d       	adc	r25, r1
     a76:	96 95       	lsr	r25
     a78:	87 95       	ror	r24
     a7a:	97 f9       	bld	r25, 7
     a7c:	08 95       	ret
     a7e:	e1 e0       	ldi	r30, 0x01	; 1
     a80:	66 0f       	add	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	88 1f       	adc	r24, r24
     a86:	bb 1f       	adc	r27, r27
     a88:	62 17       	cp	r22, r18
     a8a:	73 07       	cpc	r23, r19
     a8c:	84 07       	cpc	r24, r20
     a8e:	ba 07       	cpc	r27, r26
     a90:	20 f0       	brcs	.+8      	; 0xa9a <__divsf3_pse+0xae>
     a92:	62 1b       	sub	r22, r18
     a94:	73 0b       	sbc	r23, r19
     a96:	84 0b       	sbc	r24, r20
     a98:	ba 0b       	sbc	r27, r26
     a9a:	ee 1f       	adc	r30, r30
     a9c:	88 f7       	brcc	.-30     	; 0xa80 <__divsf3_pse+0x94>
     a9e:	e0 95       	com	r30
     aa0:	08 95       	ret

00000aa2 <__floatunsisf>:
     aa2:	e8 94       	clt
     aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__floatsisf+0x12>

00000aa6 <__floatsisf>:
     aa6:	97 fb       	bst	r25, 7
     aa8:	3e f4       	brtc	.+14     	; 0xab8 <__floatsisf+0x12>
     aaa:	90 95       	com	r25
     aac:	80 95       	com	r24
     aae:	70 95       	com	r23
     ab0:	61 95       	neg	r22
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	8f 4f       	sbci	r24, 0xFF	; 255
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	99 23       	and	r25, r25
     aba:	a9 f0       	breq	.+42     	; 0xae6 <__floatsisf+0x40>
     abc:	f9 2f       	mov	r31, r25
     abe:	96 e9       	ldi	r25, 0x96	; 150
     ac0:	bb 27       	eor	r27, r27
     ac2:	93 95       	inc	r25
     ac4:	f6 95       	lsr	r31
     ac6:	87 95       	ror	r24
     ac8:	77 95       	ror	r23
     aca:	67 95       	ror	r22
     acc:	b7 95       	ror	r27
     ace:	f1 11       	cpse	r31, r1
     ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <__floatsisf+0x1c>
     ad2:	fa f4       	brpl	.+62     	; 0xb12 <__floatsisf+0x6c>
     ad4:	bb 0f       	add	r27, r27
     ad6:	11 f4       	brne	.+4      	; 0xadc <__floatsisf+0x36>
     ad8:	60 ff       	sbrs	r22, 0
     ada:	1b c0       	rjmp	.+54     	; 0xb12 <__floatsisf+0x6c>
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	16 c0       	rjmp	.+44     	; 0xb12 <__floatsisf+0x6c>
     ae6:	88 23       	and	r24, r24
     ae8:	11 f0       	breq	.+4      	; 0xaee <__floatsisf+0x48>
     aea:	96 e9       	ldi	r25, 0x96	; 150
     aec:	11 c0       	rjmp	.+34     	; 0xb10 <__floatsisf+0x6a>
     aee:	77 23       	and	r23, r23
     af0:	21 f0       	breq	.+8      	; 0xafa <__floatsisf+0x54>
     af2:	9e e8       	ldi	r25, 0x8E	; 142
     af4:	87 2f       	mov	r24, r23
     af6:	76 2f       	mov	r23, r22
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <__floatsisf+0x5e>
     afa:	66 23       	and	r22, r22
     afc:	71 f0       	breq	.+28     	; 0xb1a <__floatsisf+0x74>
     afe:	96 e8       	ldi	r25, 0x86	; 134
     b00:	86 2f       	mov	r24, r22
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	2a f0       	brmi	.+10     	; 0xb12 <__floatsisf+0x6c>
     b08:	9a 95       	dec	r25
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	88 1f       	adc	r24, r24
     b10:	da f7       	brpl	.-10     	; 0xb08 <__floatsisf+0x62>
     b12:	88 0f       	add	r24, r24
     b14:	96 95       	lsr	r25
     b16:	87 95       	ror	r24
     b18:	97 f9       	bld	r25, 7
     b1a:	08 95       	ret

00000b1c <__fp_inf>:
     b1c:	97 f9       	bld	r25, 7
     b1e:	9f 67       	ori	r25, 0x7F	; 127
     b20:	80 e8       	ldi	r24, 0x80	; 128
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	08 95       	ret

00000b28 <__fp_nan>:
     b28:	9f ef       	ldi	r25, 0xFF	; 255
     b2a:	80 ec       	ldi	r24, 0xC0	; 192
     b2c:	08 95       	ret

00000b2e <__fp_pscA>:
     b2e:	00 24       	eor	r0, r0
     b30:	0a 94       	dec	r0
     b32:	16 16       	cp	r1, r22
     b34:	17 06       	cpc	r1, r23
     b36:	18 06       	cpc	r1, r24
     b38:	09 06       	cpc	r0, r25
     b3a:	08 95       	ret

00000b3c <__fp_pscB>:
     b3c:	00 24       	eor	r0, r0
     b3e:	0a 94       	dec	r0
     b40:	12 16       	cp	r1, r18
     b42:	13 06       	cpc	r1, r19
     b44:	14 06       	cpc	r1, r20
     b46:	05 06       	cpc	r0, r21
     b48:	08 95       	ret

00000b4a <__fp_round>:
     b4a:	09 2e       	mov	r0, r25
     b4c:	03 94       	inc	r0
     b4e:	00 0c       	add	r0, r0
     b50:	11 f4       	brne	.+4      	; 0xb56 <__fp_round+0xc>
     b52:	88 23       	and	r24, r24
     b54:	52 f0       	brmi	.+20     	; 0xb6a <__fp_round+0x20>
     b56:	bb 0f       	add	r27, r27
     b58:	40 f4       	brcc	.+16     	; 0xb6a <__fp_round+0x20>
     b5a:	bf 2b       	or	r27, r31
     b5c:	11 f4       	brne	.+4      	; 0xb62 <__fp_round+0x18>
     b5e:	60 ff       	sbrs	r22, 0
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__fp_round+0x20>
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	8f 4f       	sbci	r24, 0xFF	; 255
     b68:	9f 4f       	sbci	r25, 0xFF	; 255
     b6a:	08 95       	ret

00000b6c <__fp_split3>:
     b6c:	57 fd       	sbrc	r21, 7
     b6e:	90 58       	subi	r25, 0x80	; 128
     b70:	44 0f       	add	r20, r20
     b72:	55 1f       	adc	r21, r21
     b74:	59 f0       	breq	.+22     	; 0xb8c <__fp_splitA+0x10>
     b76:	5f 3f       	cpi	r21, 0xFF	; 255
     b78:	71 f0       	breq	.+28     	; 0xb96 <__fp_splitA+0x1a>
     b7a:	47 95       	ror	r20

00000b7c <__fp_splitA>:
     b7c:	88 0f       	add	r24, r24
     b7e:	97 fb       	bst	r25, 7
     b80:	99 1f       	adc	r25, r25
     b82:	61 f0       	breq	.+24     	; 0xb9c <__fp_splitA+0x20>
     b84:	9f 3f       	cpi	r25, 0xFF	; 255
     b86:	79 f0       	breq	.+30     	; 0xba6 <__fp_splitA+0x2a>
     b88:	87 95       	ror	r24
     b8a:	08 95       	ret
     b8c:	12 16       	cp	r1, r18
     b8e:	13 06       	cpc	r1, r19
     b90:	14 06       	cpc	r1, r20
     b92:	55 1f       	adc	r21, r21
     b94:	f2 cf       	rjmp	.-28     	; 0xb7a <__fp_split3+0xe>
     b96:	46 95       	lsr	r20
     b98:	f1 df       	rcall	.-30     	; 0xb7c <__fp_splitA>
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <__fp_splitA+0x30>
     b9c:	16 16       	cp	r1, r22
     b9e:	17 06       	cpc	r1, r23
     ba0:	18 06       	cpc	r1, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	f1 cf       	rjmp	.-30     	; 0xb88 <__fp_splitA+0xc>
     ba6:	86 95       	lsr	r24
     ba8:	71 05       	cpc	r23, r1
     baa:	61 05       	cpc	r22, r1
     bac:	08 94       	sec
     bae:	08 95       	ret

00000bb0 <__fp_zero>:
     bb0:	e8 94       	clt

00000bb2 <__fp_szero>:
     bb2:	bb 27       	eor	r27, r27
     bb4:	66 27       	eor	r22, r22
     bb6:	77 27       	eor	r23, r23
     bb8:	cb 01       	movw	r24, r22
     bba:	97 f9       	bld	r25, 7
     bbc:	08 95       	ret

00000bbe <__mulsf3>:
     bbe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__mulsf3x>
     bc2:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_round>
     bc6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_pscA>
     bca:	38 f0       	brcs	.+14     	; 0xbda <__mulsf3+0x1c>
     bcc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_pscB>
     bd0:	20 f0       	brcs	.+8      	; 0xbda <__mulsf3+0x1c>
     bd2:	95 23       	and	r25, r21
     bd4:	11 f0       	breq	.+4      	; 0xbda <__mulsf3+0x1c>
     bd6:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_inf>
     bda:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_nan>
     bde:	11 24       	eor	r1, r1
     be0:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>

00000be4 <__mulsf3x>:
     be4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_split3>
     be8:	70 f3       	brcs	.-36     	; 0xbc6 <__mulsf3+0x8>

00000bea <__mulsf3_pse>:
     bea:	95 9f       	mul	r25, r21
     bec:	c1 f3       	breq	.-16     	; 0xbde <__mulsf3+0x20>
     bee:	95 0f       	add	r25, r21
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	55 1f       	adc	r21, r21
     bf4:	62 9f       	mul	r22, r18
     bf6:	f0 01       	movw	r30, r0
     bf8:	72 9f       	mul	r23, r18
     bfa:	bb 27       	eor	r27, r27
     bfc:	f0 0d       	add	r31, r0
     bfe:	b1 1d       	adc	r27, r1
     c00:	63 9f       	mul	r22, r19
     c02:	aa 27       	eor	r26, r26
     c04:	f0 0d       	add	r31, r0
     c06:	b1 1d       	adc	r27, r1
     c08:	aa 1f       	adc	r26, r26
     c0a:	64 9f       	mul	r22, r20
     c0c:	66 27       	eor	r22, r22
     c0e:	b0 0d       	add	r27, r0
     c10:	a1 1d       	adc	r26, r1
     c12:	66 1f       	adc	r22, r22
     c14:	82 9f       	mul	r24, r18
     c16:	22 27       	eor	r18, r18
     c18:	b0 0d       	add	r27, r0
     c1a:	a1 1d       	adc	r26, r1
     c1c:	62 1f       	adc	r22, r18
     c1e:	73 9f       	mul	r23, r19
     c20:	b0 0d       	add	r27, r0
     c22:	a1 1d       	adc	r26, r1
     c24:	62 1f       	adc	r22, r18
     c26:	83 9f       	mul	r24, r19
     c28:	a0 0d       	add	r26, r0
     c2a:	61 1d       	adc	r22, r1
     c2c:	22 1f       	adc	r18, r18
     c2e:	74 9f       	mul	r23, r20
     c30:	33 27       	eor	r19, r19
     c32:	a0 0d       	add	r26, r0
     c34:	61 1d       	adc	r22, r1
     c36:	23 1f       	adc	r18, r19
     c38:	84 9f       	mul	r24, r20
     c3a:	60 0d       	add	r22, r0
     c3c:	21 1d       	adc	r18, r1
     c3e:	82 2f       	mov	r24, r18
     c40:	76 2f       	mov	r23, r22
     c42:	6a 2f       	mov	r22, r26
     c44:	11 24       	eor	r1, r1
     c46:	9f 57       	subi	r25, 0x7F	; 127
     c48:	50 40       	sbci	r21, 0x00	; 0
     c4a:	9a f0       	brmi	.+38     	; 0xc72 <__mulsf3_pse+0x88>
     c4c:	f1 f0       	breq	.+60     	; 0xc8a <__mulsf3_pse+0xa0>
     c4e:	88 23       	and	r24, r24
     c50:	4a f0       	brmi	.+18     	; 0xc64 <__mulsf3_pse+0x7a>
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	bb 1f       	adc	r27, r27
     c58:	66 1f       	adc	r22, r22
     c5a:	77 1f       	adc	r23, r23
     c5c:	88 1f       	adc	r24, r24
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	50 40       	sbci	r21, 0x00	; 0
     c62:	a9 f7       	brne	.-22     	; 0xc4e <__mulsf3_pse+0x64>
     c64:	9e 3f       	cpi	r25, 0xFE	; 254
     c66:	51 05       	cpc	r21, r1
     c68:	80 f0       	brcs	.+32     	; 0xc8a <__mulsf3_pse+0xa0>
     c6a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_inf>
     c6e:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
     c72:	5f 3f       	cpi	r21, 0xFF	; 255
     c74:	e4 f3       	brlt	.-8      	; 0xc6e <__mulsf3_pse+0x84>
     c76:	98 3e       	cpi	r25, 0xE8	; 232
     c78:	d4 f3       	brlt	.-12     	; 0xc6e <__mulsf3_pse+0x84>
     c7a:	86 95       	lsr	r24
     c7c:	77 95       	ror	r23
     c7e:	67 95       	ror	r22
     c80:	b7 95       	ror	r27
     c82:	f7 95       	ror	r31
     c84:	e7 95       	ror	r30
     c86:	9f 5f       	subi	r25, 0xFF	; 255
     c88:	c1 f7       	brne	.-16     	; 0xc7a <__mulsf3_pse+0x90>
     c8a:	fe 2b       	or	r31, r30
     c8c:	88 0f       	add	r24, r24
     c8e:	91 1d       	adc	r25, r1
     c90:	96 95       	lsr	r25
     c92:	87 95       	ror	r24
     c94:	97 f9       	bld	r25, 7
     c96:	08 95       	ret

00000c98 <dtostrf>:
     c98:	ef 92       	push	r14
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	e8 01       	movw	r28, r16
     ca4:	47 fd       	sbrc	r20, 7
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <dtostrf+0x14>
     ca8:	34 e0       	ldi	r19, 0x04	; 4
     caa:	01 c0       	rjmp	.+2      	; 0xcae <dtostrf+0x16>
     cac:	34 e1       	ldi	r19, 0x14	; 20
     cae:	04 2e       	mov	r0, r20
     cb0:	00 0c       	add	r0, r0
     cb2:	55 0b       	sbc	r21, r21
     cb4:	57 ff       	sbrs	r21, 7
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <dtostrf+0x26>
     cb8:	51 95       	neg	r21
     cba:	41 95       	neg	r20
     cbc:	51 09       	sbc	r21, r1
     cbe:	e3 2e       	mov	r14, r19
     cc0:	02 2f       	mov	r16, r18
     cc2:	24 2f       	mov	r18, r20
     cc4:	ae 01       	movw	r20, r28
     cc6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <dtoa_prf>
     cca:	ce 01       	movw	r24, r28
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ef 90       	pop	r14
     cd6:	08 95       	ret

00000cd8 <dtoa_prf>:
     cd8:	a9 e0       	ldi	r26, 0x09	; 9
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e2 e7       	ldi	r30, 0x72	; 114
     cde:	f6 e0       	ldi	r31, 0x06	; 6
     ce0:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__prologue_saves__+0xc>
     ce4:	6a 01       	movw	r12, r20
     ce6:	12 2f       	mov	r17, r18
     ce8:	b0 2e       	mov	r11, r16
     cea:	2b e3       	ldi	r18, 0x3B	; 59
     cec:	20 17       	cp	r18, r16
     cee:	20 f0       	brcs	.+8      	; 0xcf8 <dtoa_prf+0x20>
     cf0:	ff 24       	eor	r15, r15
     cf2:	f3 94       	inc	r15
     cf4:	f0 0e       	add	r15, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <dtoa_prf+0x24>
     cf8:	2c e3       	ldi	r18, 0x3C	; 60
     cfa:	f2 2e       	mov	r15, r18
     cfc:	0f 2d       	mov	r16, r15
     cfe:	27 e0       	ldi	r18, 0x07	; 7
     d00:	ae 01       	movw	r20, r28
     d02:	4f 5f       	subi	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__ftoa_engine>
     d0a:	bc 01       	movw	r22, r24
     d0c:	49 81       	ldd	r20, Y+1	; 0x01
     d0e:	84 2f       	mov	r24, r20
     d10:	89 70       	andi	r24, 0x09	; 9
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	31 f0       	breq	.+12     	; 0xd22 <dtoa_prf+0x4a>
     d16:	e1 fc       	sbrc	r14, 1
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <dtoa_prf+0x4e>
     d1a:	e0 fe       	sbrs	r14, 0
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <dtoa_prf+0x52>
     d1e:	90 e2       	ldi	r25, 0x20	; 32
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <dtoa_prf+0x54>
     d22:	9d e2       	ldi	r25, 0x2D	; 45
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <dtoa_prf+0x54>
     d26:	9b e2       	ldi	r25, 0x2B	; 43
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <dtoa_prf+0x54>
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	5e 2d       	mov	r21, r14
     d2e:	50 71       	andi	r21, 0x10	; 16
     d30:	43 ff       	sbrs	r20, 3
     d32:	3c c0       	rjmp	.+120    	; 0xdac <dtoa_prf+0xd4>
     d34:	91 11       	cpse	r25, r1
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <dtoa_prf+0x64>
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <dtoa_prf+0x66>
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	81 17       	cp	r24, r17
     d40:	18 f4       	brcc	.+6      	; 0xd48 <dtoa_prf+0x70>
     d42:	21 2f       	mov	r18, r17
     d44:	28 1b       	sub	r18, r24
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <dtoa_prf+0x72>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	51 11       	cpse	r21, r1
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <dtoa_prf+0x8c>
     d4e:	f6 01       	movw	r30, r12
     d50:	82 2f       	mov	r24, r18
     d52:	30 e2       	ldi	r19, 0x20	; 32
     d54:	88 23       	and	r24, r24
     d56:	19 f0       	breq	.+6      	; 0xd5e <dtoa_prf+0x86>
     d58:	31 93       	st	Z+, r19
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	fb cf       	rjmp	.-10     	; 0xd54 <dtoa_prf+0x7c>
     d5e:	c2 0e       	add	r12, r18
     d60:	d1 1c       	adc	r13, r1
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	99 23       	and	r25, r25
     d66:	29 f0       	breq	.+10     	; 0xd72 <dtoa_prf+0x9a>
     d68:	d6 01       	movw	r26, r12
     d6a:	9c 93       	st	X, r25
     d6c:	f6 01       	movw	r30, r12
     d6e:	31 96       	adiw	r30, 0x01	; 1
     d70:	6f 01       	movw	r12, r30
     d72:	c6 01       	movw	r24, r12
     d74:	03 96       	adiw	r24, 0x03	; 3
     d76:	e2 fe       	sbrs	r14, 2
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <dtoa_prf+0xb6>
     d7a:	3e e4       	ldi	r19, 0x4E	; 78
     d7c:	d6 01       	movw	r26, r12
     d7e:	3c 93       	st	X, r19
     d80:	41 e4       	ldi	r20, 0x41	; 65
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	4c 93       	st	X, r20
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	3c 93       	st	X, r19
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <dtoa_prf+0xc2>
     d8e:	3e e6       	ldi	r19, 0x6E	; 110
     d90:	f6 01       	movw	r30, r12
     d92:	30 83       	st	Z, r19
     d94:	41 e6       	ldi	r20, 0x61	; 97
     d96:	41 83       	std	Z+1, r20	; 0x01
     d98:	32 83       	std	Z+2, r19	; 0x02
     d9a:	fc 01       	movw	r30, r24
     d9c:	32 2f       	mov	r19, r18
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	33 23       	and	r19, r19
     da2:	09 f4       	brne	.+2      	; 0xda6 <dtoa_prf+0xce>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <dtoa_prf+0x152>
     da6:	41 93       	st	Z+, r20
     da8:	31 50       	subi	r19, 0x01	; 1
     daa:	fa cf       	rjmp	.-12     	; 0xda0 <dtoa_prf+0xc8>
     dac:	42 ff       	sbrs	r20, 2
     dae:	44 c0       	rjmp	.+136    	; 0xe38 <dtoa_prf+0x160>
     db0:	91 11       	cpse	r25, r1
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <dtoa_prf+0xe0>
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	01 c0       	rjmp	.+2      	; 0xdba <dtoa_prf+0xe2>
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	81 17       	cp	r24, r17
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <dtoa_prf+0xec>
     dbe:	21 2f       	mov	r18, r17
     dc0:	28 1b       	sub	r18, r24
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <dtoa_prf+0xee>
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	51 11       	cpse	r21, r1
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <dtoa_prf+0x108>
     dca:	f6 01       	movw	r30, r12
     dcc:	82 2f       	mov	r24, r18
     dce:	30 e2       	ldi	r19, 0x20	; 32
     dd0:	88 23       	and	r24, r24
     dd2:	19 f0       	breq	.+6      	; 0xdda <dtoa_prf+0x102>
     dd4:	31 93       	st	Z+, r19
     dd6:	81 50       	subi	r24, 0x01	; 1
     dd8:	fb cf       	rjmp	.-10     	; 0xdd0 <dtoa_prf+0xf8>
     dda:	c2 0e       	add	r12, r18
     ddc:	d1 1c       	adc	r13, r1
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	99 23       	and	r25, r25
     de2:	29 f0       	breq	.+10     	; 0xdee <dtoa_prf+0x116>
     de4:	d6 01       	movw	r26, r12
     de6:	9c 93       	st	X, r25
     de8:	f6 01       	movw	r30, r12
     dea:	31 96       	adiw	r30, 0x01	; 1
     dec:	6f 01       	movw	r12, r30
     dee:	c6 01       	movw	r24, r12
     df0:	03 96       	adiw	r24, 0x03	; 3
     df2:	e2 fe       	sbrs	r14, 2
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <dtoa_prf+0x134>
     df6:	39 e4       	ldi	r19, 0x49	; 73
     df8:	d6 01       	movw	r26, r12
     dfa:	3c 93       	st	X, r19
     dfc:	3e e4       	ldi	r19, 0x4E	; 78
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	3c 93       	st	X, r19
     e02:	11 97       	sbiw	r26, 0x01	; 1
     e04:	36 e4       	ldi	r19, 0x46	; 70
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	3c 93       	st	X, r19
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <dtoa_prf+0x142>
     e0c:	39 e6       	ldi	r19, 0x69	; 105
     e0e:	f6 01       	movw	r30, r12
     e10:	30 83       	st	Z, r19
     e12:	3e e6       	ldi	r19, 0x6E	; 110
     e14:	31 83       	std	Z+1, r19	; 0x01
     e16:	36 e6       	ldi	r19, 0x66	; 102
     e18:	32 83       	std	Z+2, r19	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	32 2f       	mov	r19, r18
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	33 23       	and	r19, r19
     e22:	19 f0       	breq	.+6      	; 0xe2a <dtoa_prf+0x152>
     e24:	41 93       	st	Z+, r20
     e26:	31 50       	subi	r19, 0x01	; 1
     e28:	fb cf       	rjmp	.-10     	; 0xe20 <dtoa_prf+0x148>
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 0f       	add	r30, r18
     e2e:	f1 1d       	adc	r31, r1
     e30:	10 82       	st	Z, r1
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	9f ef       	ldi	r25, 0xFF	; 255
     e36:	a6 c0       	rjmp	.+332    	; 0xf84 <dtoa_prf+0x2ac>
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	91 11       	cpse	r25, r1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <dtoa_prf+0x16c>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	1c f4       	brge	.+6      	; 0xe50 <dtoa_prf+0x178>
     e4a:	fb 01       	movw	r30, r22
     e4c:	31 96       	adiw	r30, 0x01	; 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <dtoa_prf+0x17c>
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	2e 0f       	add	r18, r30
     e56:	3f 1f       	adc	r19, r31
     e58:	bb 20       	and	r11, r11
     e5a:	21 f0       	breq	.+8      	; 0xe64 <dtoa_prf+0x18c>
     e5c:	eb 2d       	mov	r30, r11
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <dtoa_prf+0x190>
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	2e 0f       	add	r18, r30
     e6a:	3f 1f       	adc	r19, r31
     e6c:	e1 2f       	mov	r30, r17
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	2e 17       	cp	r18, r30
     e72:	3f 07       	cpc	r19, r31
     e74:	1c f4       	brge	.+6      	; 0xe7c <dtoa_prf+0x1a4>
     e76:	12 1b       	sub	r17, r18
     e78:	21 2f       	mov	r18, r17
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <dtoa_prf+0x1a6>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	8e 2d       	mov	r24, r14
     e80:	88 71       	andi	r24, 0x18	; 24
     e82:	59 f4       	brne	.+22     	; 0xe9a <dtoa_prf+0x1c2>
     e84:	f6 01       	movw	r30, r12
     e86:	82 2f       	mov	r24, r18
     e88:	30 e2       	ldi	r19, 0x20	; 32
     e8a:	88 23       	and	r24, r24
     e8c:	19 f0       	breq	.+6      	; 0xe94 <dtoa_prf+0x1bc>
     e8e:	31 93       	st	Z+, r19
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	fb cf       	rjmp	.-10     	; 0xe8a <dtoa_prf+0x1b2>
     e94:	c2 0e       	add	r12, r18
     e96:	d1 1c       	adc	r13, r1
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	99 23       	and	r25, r25
     e9c:	29 f0       	breq	.+10     	; 0xea8 <dtoa_prf+0x1d0>
     e9e:	d6 01       	movw	r26, r12
     ea0:	9c 93       	st	X, r25
     ea2:	f6 01       	movw	r30, r12
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	6f 01       	movw	r12, r30
     ea8:	51 11       	cpse	r21, r1
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <dtoa_prf+0x1ea>
     eac:	f6 01       	movw	r30, r12
     eae:	82 2f       	mov	r24, r18
     eb0:	90 e3       	ldi	r25, 0x30	; 48
     eb2:	88 23       	and	r24, r24
     eb4:	19 f0       	breq	.+6      	; 0xebc <dtoa_prf+0x1e4>
     eb6:	91 93       	st	Z+, r25
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	fb cf       	rjmp	.-10     	; 0xeb2 <dtoa_prf+0x1da>
     ebc:	c2 0e       	add	r12, r18
     ebe:	d1 1c       	adc	r13, r1
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	0f 2d       	mov	r16, r15
     ec4:	06 0f       	add	r16, r22
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	34 2f       	mov	r19, r20
     eca:	30 71       	andi	r19, 0x10	; 16
     ecc:	44 ff       	sbrs	r20, 4
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <dtoa_prf+0x1fe>
     ed0:	91 33       	cpi	r25, 0x31	; 49
     ed2:	09 f4       	brne	.+2      	; 0xed6 <dtoa_prf+0x1fe>
     ed4:	01 50       	subi	r16, 0x01	; 1
     ed6:	10 16       	cp	r1, r16
     ed8:	24 f4       	brge	.+8      	; 0xee2 <dtoa_prf+0x20a>
     eda:	09 30       	cpi	r16, 0x09	; 9
     edc:	18 f0       	brcs	.+6      	; 0xee4 <dtoa_prf+0x20c>
     ede:	08 e0       	ldi	r16, 0x08	; 8
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <dtoa_prf+0x20c>
     ee2:	01 e0       	ldi	r16, 0x01	; 1
     ee4:	ab 01       	movw	r20, r22
     ee6:	77 ff       	sbrs	r23, 7
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <dtoa_prf+0x216>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	fb 01       	movw	r30, r22
     ef0:	e4 1b       	sub	r30, r20
     ef2:	f5 0b       	sbc	r31, r21
     ef4:	a1 e0       	ldi	r26, 0x01	; 1
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ac 0f       	add	r26, r28
     efa:	bd 1f       	adc	r27, r29
     efc:	ea 0f       	add	r30, r26
     efe:	fb 1f       	adc	r31, r27
     f00:	8e e2       	ldi	r24, 0x2E	; 46
     f02:	a8 2e       	mov	r10, r24
     f04:	4b 01       	movw	r8, r22
     f06:	80 1a       	sub	r8, r16
     f08:	91 08       	sbc	r9, r1
     f0a:	0b 2d       	mov	r16, r11
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	11 95       	neg	r17
     f10:	01 95       	neg	r16
     f12:	11 09       	sbc	r17, r1
     f14:	4f 3f       	cpi	r20, 0xFF	; 255
     f16:	bf ef       	ldi	r27, 0xFF	; 255
     f18:	5b 07       	cpc	r21, r27
     f1a:	21 f4       	brne	.+8      	; 0xf24 <dtoa_prf+0x24c>
     f1c:	d6 01       	movw	r26, r12
     f1e:	ac 92       	st	X, r10
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	6d 01       	movw	r12, r26
     f24:	64 17       	cp	r22, r20
     f26:	75 07       	cpc	r23, r21
     f28:	2c f0       	brlt	.+10     	; 0xf34 <dtoa_prf+0x25c>
     f2a:	84 16       	cp	r8, r20
     f2c:	95 06       	cpc	r9, r21
     f2e:	14 f4       	brge	.+4      	; 0xf34 <dtoa_prf+0x25c>
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <dtoa_prf+0x25e>
     f34:	80 e3       	ldi	r24, 0x30	; 48
     f36:	41 50       	subi	r20, 0x01	; 1
     f38:	51 09       	sbc	r21, r1
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	d6 01       	movw	r26, r12
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	7d 01       	movw	r14, r26
     f42:	40 17       	cp	r20, r16
     f44:	51 07       	cpc	r21, r17
     f46:	24 f0       	brlt	.+8      	; 0xf50 <dtoa_prf+0x278>
     f48:	d6 01       	movw	r26, r12
     f4a:	8c 93       	st	X, r24
     f4c:	67 01       	movw	r12, r14
     f4e:	e2 cf       	rjmp	.-60     	; 0xf14 <dtoa_prf+0x23c>
     f50:	64 17       	cp	r22, r20
     f52:	75 07       	cpc	r23, r21
     f54:	39 f4       	brne	.+14     	; 0xf64 <dtoa_prf+0x28c>
     f56:	96 33       	cpi	r25, 0x36	; 54
     f58:	20 f4       	brcc	.+8      	; 0xf62 <dtoa_prf+0x28a>
     f5a:	95 33       	cpi	r25, 0x35	; 53
     f5c:	19 f4       	brne	.+6      	; 0xf64 <dtoa_prf+0x28c>
     f5e:	31 11       	cpse	r19, r1
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <dtoa_prf+0x28c>
     f62:	81 e3       	ldi	r24, 0x31	; 49
     f64:	f6 01       	movw	r30, r12
     f66:	80 83       	st	Z, r24
     f68:	f7 01       	movw	r30, r14
     f6a:	82 2f       	mov	r24, r18
     f6c:	90 e2       	ldi	r25, 0x20	; 32
     f6e:	88 23       	and	r24, r24
     f70:	19 f0       	breq	.+6      	; 0xf78 <dtoa_prf+0x2a0>
     f72:	91 93       	st	Z+, r25
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	fb cf       	rjmp	.-10     	; 0xf6e <dtoa_prf+0x296>
     f78:	f7 01       	movw	r30, r14
     f7a:	e2 0f       	add	r30, r18
     f7c:	f1 1d       	adc	r31, r1
     f7e:	10 82       	st	Z, r1
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	29 96       	adiw	r28, 0x09	; 9
     f86:	ec e0       	ldi	r30, 0x0C	; 12
     f88:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__epilogue_restores__+0xc>

00000f8c <__ftoa_engine>:
     f8c:	28 30       	cpi	r18, 0x08	; 8
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <__ftoa_engine+0x6>
     f90:	27 e0       	ldi	r18, 0x07	; 7
     f92:	33 27       	eor	r19, r19
     f94:	da 01       	movw	r26, r20
     f96:	99 0f       	add	r25, r25
     f98:	31 1d       	adc	r19, r1
     f9a:	87 fd       	sbrc	r24, 7
     f9c:	91 60       	ori	r25, 0x01	; 1
     f9e:	00 96       	adiw	r24, 0x00	; 0
     fa0:	61 05       	cpc	r22, r1
     fa2:	71 05       	cpc	r23, r1
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <__ftoa_engine+0x28>
     fa6:	32 60       	ori	r19, 0x02	; 2
     fa8:	2e 5f       	subi	r18, 0xFE	; 254
     faa:	3d 93       	st	X+, r19
     fac:	30 e3       	ldi	r19, 0x30	; 48
     fae:	2a 95       	dec	r18
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <__ftoa_engine+0x1e>
     fb2:	08 95       	ret
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	30 f0       	brcs	.+12     	; 0xfc4 <__ftoa_engine+0x38>
     fb8:	80 38       	cpi	r24, 0x80	; 128
     fba:	71 05       	cpc	r23, r1
     fbc:	61 05       	cpc	r22, r1
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <__ftoa_engine+0x36>
     fc0:	3c 5f       	subi	r19, 0xFC	; 252
     fc2:	3c 5f       	subi	r19, 0xFC	; 252
     fc4:	3d 93       	st	X+, r19
     fc6:	91 30       	cpi	r25, 0x01	; 1
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <__ftoa_engine+0x40>
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	91 1d       	adc	r25, r1
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	1f 93       	push	r17
     fd4:	0f 93       	push	r16
     fd6:	ff 92       	push	r15
     fd8:	ef 92       	push	r14
     fda:	19 2f       	mov	r17, r25
     fdc:	98 7f       	andi	r25, 0xF8	; 248
     fde:	96 95       	lsr	r25
     fe0:	e9 2f       	mov	r30, r25
     fe2:	96 95       	lsr	r25
     fe4:	96 95       	lsr	r25
     fe6:	e9 0f       	add	r30, r25
     fe8:	ff 27       	eor	r31, r31
     fea:	ee 53       	subi	r30, 0x3E	; 62
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	99 27       	eor	r25, r25
     ff0:	33 27       	eor	r19, r19
     ff2:	ee 24       	eor	r14, r14
     ff4:	ff 24       	eor	r15, r15
     ff6:	a7 01       	movw	r20, r14
     ff8:	e7 01       	movw	r28, r14
     ffa:	05 90       	lpm	r0, Z+
     ffc:	08 94       	sec
     ffe:	07 94       	ror	r0
    1000:	28 f4       	brcc	.+10     	; 0x100c <__ftoa_engine+0x80>
    1002:	36 0f       	add	r19, r22
    1004:	e7 1e       	adc	r14, r23
    1006:	f8 1e       	adc	r15, r24
    1008:	49 1f       	adc	r20, r25
    100a:	51 1d       	adc	r21, r1
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	06 94       	lsr	r0
    1016:	a1 f7       	brne	.-24     	; 0x1000 <__ftoa_engine+0x74>
    1018:	05 90       	lpm	r0, Z+
    101a:	07 94       	ror	r0
    101c:	28 f4       	brcc	.+10     	; 0x1028 <__ftoa_engine+0x9c>
    101e:	e7 0e       	add	r14, r23
    1020:	f8 1e       	adc	r15, r24
    1022:	49 1f       	adc	r20, r25
    1024:	56 1f       	adc	r21, r22
    1026:	c1 1d       	adc	r28, r1
    1028:	77 0f       	add	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	66 1f       	adc	r22, r22
    1030:	06 94       	lsr	r0
    1032:	a1 f7       	brne	.-24     	; 0x101c <__ftoa_engine+0x90>
    1034:	05 90       	lpm	r0, Z+
    1036:	07 94       	ror	r0
    1038:	28 f4       	brcc	.+10     	; 0x1044 <__ftoa_engine+0xb8>
    103a:	f8 0e       	add	r15, r24
    103c:	49 1f       	adc	r20, r25
    103e:	56 1f       	adc	r21, r22
    1040:	c7 1f       	adc	r28, r23
    1042:	d1 1d       	adc	r29, r1
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	06 94       	lsr	r0
    104e:	a1 f7       	brne	.-24     	; 0x1038 <__ftoa_engine+0xac>
    1050:	05 90       	lpm	r0, Z+
    1052:	07 94       	ror	r0
    1054:	20 f4       	brcc	.+8      	; 0x105e <__ftoa_engine+0xd2>
    1056:	49 0f       	add	r20, r25
    1058:	56 1f       	adc	r21, r22
    105a:	c7 1f       	adc	r28, r23
    105c:	d8 1f       	adc	r29, r24
    105e:	99 0f       	add	r25, r25
    1060:	66 1f       	adc	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	06 94       	lsr	r0
    1068:	a9 f7       	brne	.-22     	; 0x1054 <__ftoa_engine+0xc8>
    106a:	84 91       	lpm	r24, Z
    106c:	10 95       	com	r17
    106e:	17 70       	andi	r17, 0x07	; 7
    1070:	41 f0       	breq	.+16     	; 0x1082 <__ftoa_engine+0xf6>
    1072:	d6 95       	lsr	r29
    1074:	c7 95       	ror	r28
    1076:	57 95       	ror	r21
    1078:	47 95       	ror	r20
    107a:	f7 94       	ror	r15
    107c:	e7 94       	ror	r14
    107e:	1a 95       	dec	r17
    1080:	c1 f7       	brne	.-16     	; 0x1072 <__ftoa_engine+0xe6>
    1082:	e8 e6       	ldi	r30, 0x68	; 104
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	68 94       	set
    1088:	15 90       	lpm	r1, Z+
    108a:	15 91       	lpm	r17, Z+
    108c:	35 91       	lpm	r19, Z+
    108e:	65 91       	lpm	r22, Z+
    1090:	95 91       	lpm	r25, Z+
    1092:	05 90       	lpm	r0, Z+
    1094:	7f e2       	ldi	r23, 0x2F	; 47
    1096:	73 95       	inc	r23
    1098:	e1 18       	sub	r14, r1
    109a:	f1 0a       	sbc	r15, r17
    109c:	43 0b       	sbc	r20, r19
    109e:	56 0b       	sbc	r21, r22
    10a0:	c9 0b       	sbc	r28, r25
    10a2:	d0 09       	sbc	r29, r0
    10a4:	c0 f7       	brcc	.-16     	; 0x1096 <__ftoa_engine+0x10a>
    10a6:	e1 0c       	add	r14, r1
    10a8:	f1 1e       	adc	r15, r17
    10aa:	43 1f       	adc	r20, r19
    10ac:	56 1f       	adc	r21, r22
    10ae:	c9 1f       	adc	r28, r25
    10b0:	d0 1d       	adc	r29, r0
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__ftoa_engine+0x146>
    10b4:	70 33       	cpi	r23, 0x30	; 48
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__ftoa_engine+0x130>
    10b8:	8a 95       	dec	r24
    10ba:	e6 cf       	rjmp	.-52     	; 0x1088 <__ftoa_engine+0xfc>
    10bc:	e8 94       	clt
    10be:	01 50       	subi	r16, 0x01	; 1
    10c0:	30 f0       	brcs	.+12     	; 0x10ce <__ftoa_engine+0x142>
    10c2:	08 0f       	add	r16, r24
    10c4:	0a f4       	brpl	.+2      	; 0x10c8 <__ftoa_engine+0x13c>
    10c6:	00 27       	eor	r16, r16
    10c8:	02 17       	cp	r16, r18
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__ftoa_engine+0x142>
    10cc:	20 2f       	mov	r18, r16
    10ce:	23 95       	inc	r18
    10d0:	02 2f       	mov	r16, r18
    10d2:	7a 33       	cpi	r23, 0x3A	; 58
    10d4:	28 f0       	brcs	.+10     	; 0x10e0 <__ftoa_engine+0x154>
    10d6:	79 e3       	ldi	r23, 0x39	; 57
    10d8:	7d 93       	st	X+, r23
    10da:	2a 95       	dec	r18
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <__ftoa_engine+0x14c>
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <__ftoa_engine+0x174>
    10e0:	7d 93       	st	X+, r23
    10e2:	2a 95       	dec	r18
    10e4:	89 f6       	brne	.-94     	; 0x1088 <__ftoa_engine+0xfc>
    10e6:	06 94       	lsr	r0
    10e8:	97 95       	ror	r25
    10ea:	67 95       	ror	r22
    10ec:	37 95       	ror	r19
    10ee:	17 95       	ror	r17
    10f0:	17 94       	ror	r1
    10f2:	e1 18       	sub	r14, r1
    10f4:	f1 0a       	sbc	r15, r17
    10f6:	43 0b       	sbc	r20, r19
    10f8:	56 0b       	sbc	r21, r22
    10fa:	c9 0b       	sbc	r28, r25
    10fc:	d0 09       	sbc	r29, r0
    10fe:	98 f0       	brcs	.+38     	; 0x1126 <__ftoa_engine+0x19a>
    1100:	23 95       	inc	r18
    1102:	7e 91       	ld	r23, -X
    1104:	73 95       	inc	r23
    1106:	7a 33       	cpi	r23, 0x3A	; 58
    1108:	08 f0       	brcs	.+2      	; 0x110c <__ftoa_engine+0x180>
    110a:	70 e3       	ldi	r23, 0x30	; 48
    110c:	7c 93       	st	X, r23
    110e:	20 13       	cpse	r18, r16
    1110:	b8 f7       	brcc	.-18     	; 0x1100 <__ftoa_engine+0x174>
    1112:	7e 91       	ld	r23, -X
    1114:	70 61       	ori	r23, 0x10	; 16
    1116:	7d 93       	st	X+, r23
    1118:	30 f0       	brcs	.+12     	; 0x1126 <__ftoa_engine+0x19a>
    111a:	83 95       	inc	r24
    111c:	71 e3       	ldi	r23, 0x31	; 49
    111e:	7d 93       	st	X+, r23
    1120:	70 e3       	ldi	r23, 0x30	; 48
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <__ftoa_engine+0x192>
    1126:	11 24       	eor	r1, r1
    1128:	ef 90       	pop	r14
    112a:	ff 90       	pop	r15
    112c:	0f 91       	pop	r16
    112e:	1f 91       	pop	r17
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	99 27       	eor	r25, r25
    1136:	87 fd       	sbrc	r24, 7
    1138:	90 95       	com	r25
    113a:	08 95       	ret

0000113c <__prologue_saves__>:
    113c:	2f 92       	push	r2
    113e:	3f 92       	push	r3
    1140:	4f 92       	push	r4
    1142:	5f 92       	push	r5
    1144:	6f 92       	push	r6
    1146:	7f 92       	push	r7
    1148:	8f 92       	push	r8
    114a:	9f 92       	push	r9
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	ca 1b       	sub	r28, r26
    1166:	db 0b       	sbc	r29, r27
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	09 94       	ijmp

00001174 <__epilogue_restores__>:
    1174:	2a 88       	ldd	r2, Y+18	; 0x12
    1176:	39 88       	ldd	r3, Y+17	; 0x11
    1178:	48 88       	ldd	r4, Y+16	; 0x10
    117a:	5f 84       	ldd	r5, Y+15	; 0x0f
    117c:	6e 84       	ldd	r6, Y+14	; 0x0e
    117e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1180:	8c 84       	ldd	r8, Y+12	; 0x0c
    1182:	9b 84       	ldd	r9, Y+11	; 0x0b
    1184:	aa 84       	ldd	r10, Y+10	; 0x0a
    1186:	b9 84       	ldd	r11, Y+9	; 0x09
    1188:	c8 84       	ldd	r12, Y+8	; 0x08
    118a:	df 80       	ldd	r13, Y+7	; 0x07
    118c:	ee 80       	ldd	r14, Y+6	; 0x06
    118e:	fd 80       	ldd	r15, Y+5	; 0x05
    1190:	0c 81       	ldd	r16, Y+4	; 0x04
    1192:	1b 81       	ldd	r17, Y+3	; 0x03
    1194:	aa 81       	ldd	r26, Y+2	; 0x02
    1196:	b9 81       	ldd	r27, Y+1	; 0x01
    1198:	ce 0f       	add	r28, r30
    119a:	d1 1d       	adc	r29, r1
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	ed 01       	movw	r28, r26
    11a8:	08 95       	ret

000011aa <_exit>:
    11aa:	f8 94       	cli

000011ac <__stop_program>:
    11ac:	ff cf       	rjmp	.-2      	; 0x11ac <__stop_program>
